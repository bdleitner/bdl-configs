package com.bdl.config;

import com.bdl.config.annotation.processor.Annotations.DummyQualifier;
import com.bdl.config.others.OtherThingA;
import com.bdl.config.things.Thing2;

import dagger.Module;
import dagger.Provides;
import dagger.multibindings.IntoSet;

/** Dagger module for binding configs in the com.bdl.config package. */
@Module(includes = {com.bdl.config.others.ConfigDaggerModule.class, com.bdl.config.things.ConfigDaggerModule.class})
public class ConfigDaggerModule {

  /** Adds a ConfigSupplier for config otherFlag1 (OtherThingA.otherFlag1) to the set multibinder. */
  @Provides
  @IntoSet
  public static ConfigSupplier provideConfigSupplier_otherFlag1() {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.others")
        .className("OtherThingA")
        .fieldName("otherFlag1")
        .type("String")
        .build();
    return ConfigSupplier.simple(description, OtherThingA.otherFlag1);
  }

  /** Binds the type of the config with a ConfigValue annotation to the Configurable's value. */
  @Provides
  @ConfigValue("otherFlag1")
  public static String provideConfigValue_otherFlag1(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.others.OtherThingA.otherFlag1");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }

  /** Adds a ConfigSupplier for config otherFlag2 (OtherThingA.otherFlag2) to the set multibinder. */
  @Provides
  @IntoSet
  public static ConfigSupplier provideConfigSupplier_otherFlag2() {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.others")
        .className("OtherThingA")
        .fieldName("otherFlag2")
        .type("String")
        .build();
    return ConfigSupplier.reflective(description);
  }

  /** Binds the type of the config with a ConfigValue annotation to the Configurable's value. */
  @Provides
  @ConfigValue("otherFlag2")
  public static String provideConfigValue_otherFlag2(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.others.OtherThingA.otherFlag2");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }

  /** Adds a ConfigSupplier for config flag2 (Thing2.flag2) to the set multibinder. */
  @Provides
  @IntoSet
  public static ConfigSupplier provideConfigSupplier_flag2() {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.things")
        .className("Thing2")
        .fieldName("flag2")
        .type("String")
        .build();
    return ConfigSupplier.simple(description, Thing2.flag2);
  }

  /** Binds the type of the config with a DummyQualifier annotation to the Configurable's value. */
  @Provides
  @DummyQualifier("flag2")
  public static String provideConfigValue_flag2(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.things.Thing2.flag2");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }
}
