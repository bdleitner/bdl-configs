package com.bdl.config.others;

import com.bdl.config.ConfigDescription;
import com.bdl.config.ConfigException;
import com.bdl.config.ConfigSupplier;
import com.bdl.config.ConfigValue;
import com.bdl.config.Configuration;

import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.google.inject.multibindings.Multibinder;

/** Guice module for binding configs in the com.bdl.config.others package. */
public class ConfigGuiceModule extends AbstractModule {

  @Override
  protected void configure() {
    Multibinder<ConfigSupplier> supplierBinder = Multibinder.newSetBinder(binder(), ConfigSupplier.class);
    bindConfigSupplier_otherFlag3(supplierBinder);
  }

  /** Binds a ConfigSupplier for config otherFlag3 (com.bdl.config.others.OtherThingA.otherFlag3) to the set multibinder. */
  private void bindConfigSupplier_otherFlag3(Multibinder<ConfigSupplier> binder) {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.others")
        .className("OtherThingA")
        .fieldName("otherFlag3")
        .type("java.lang.String")
        .build();
    binder.addBinding().toInstance(
        ConfigSupplier.simple(description, com.bdl.config.others.OtherThingA.otherFlag3));
  }

  /** Binds the type of the config with a ConfigValue annotation to the Configurable's value. */
  @Provides
  @com.bdl.config.annotation.processor.Annotations.DummyQualifier("")
  java.lang.String provideConfigValue_otherFlag3(Configuration configuration) {
    try {
      return (java.lang.String) configuration.get("com.bdl.config.others.OtherThingA.otherFlag3");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }
}
