package com.bdl.config.things;

import com.bdl.config.ConfigDescription;
import com.bdl.config.ConfigException;
import com.bdl.config.ConfigSupplier;
import com.bdl.config.ConfigValue;
import com.bdl.config.Configuration;

import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.google.inject.multibindings.Multibinder;

/** Guice module for binding configs in the com.bdl.config.things package. */
public class ConfigGuiceModule extends AbstractModule {

  @Override
  protected void configure() {
    Multibinder<ConfigSupplier> supplierBinder = Multibinder.newSetBinder(binder(), ConfigSupplier.class);
    bindConfigSupplier_flag1(supplierBinder);
  }

  /** Binds a ConfigSupplier for config flag1 (com.bdl.config.things.Thing1.flag1) to the set multibinder. */
  private void bindConfigSupplier_flag1(Multibinder<ConfigSupplier> binder) {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.things")
        .className("Thing1")
        .fieldName("flag1")
        .type("String")
        .build();
    binder.addBinding().toInstance(
        ConfigSupplier.simple(description, com.bdl.config.things.Thing1.flag1));
  }

  /** Binds the type of the config with a ConfigValue annotation to the Configurable's value. */
  @Provides
  @ConfigValue("flag1")
  String provideConfigValue_flag1(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.things.Thing1.flag1");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }
}
