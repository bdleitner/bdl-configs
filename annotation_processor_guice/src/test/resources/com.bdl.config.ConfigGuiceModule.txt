package com.bdl.config;

import com.bdl.config.annotation.processor.GuiceAnnotations.DummyBindingAnnotation;
import com.bdl.config.others.OtherThingA;
import com.bdl.config.things.Thing2;

import com.google.inject.AbstractModule;
import com.google.inject.Provides;
import com.google.inject.multibindings.Multibinder;

/** Guice module for binding configs in the com.bdl.config package. */
public class ConfigGuiceModule extends AbstractModule {

  @Override
  protected void configure() {
    install(new com.bdl.config.others.ConfigGuiceModule());
    install(new com.bdl.config.things.ConfigGuiceModule());

    Multibinder<ConfigSupplier> supplierBinder = Multibinder.newSetBinder(binder(), ConfigSupplier.class);
    bindConfigSupplier_otherFlag1(supplierBinder);
    bindConfigSupplier_otherFlag2(supplierBinder);
    bindConfigSupplier_flag2(supplierBinder);
  }

  /** Binds a ConfigSupplier for config otherFlag1 (OtherThingA.otherFlag1) to the set multibinder. */
  private void bindConfigSupplier_otherFlag1(Multibinder<ConfigSupplier> binder) {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.others")
        .className("OtherThingA")
        .fieldName("otherFlag1")
        .type("String")
        .build();
    binder.addBinding().toInstance(
        ConfigSupplier.simple(description, OtherThingA.otherFlag1));
  }

  /** Binds the type of the config with a ConfigValue annotation to the Configurable's value. */
  @Provides
  @ConfigValue("otherFlag1")
  String provideConfigValue_otherFlag1(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.others.OtherThingA.otherFlag1");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }

  /** Binds a ConfigSupplier for config otherFlag2 (OtherThingA.otherFlag2) to the set multibinder. */
  private void bindConfigSupplier_otherFlag2(Multibinder<ConfigSupplier> binder) {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.others")
        .className("OtherThingA")
        .fieldName("otherFlag2")
        .type("String")
        .build();
    binder.addBinding().toInstance(
        ConfigSupplier.reflective(description));
  }

  /** Binds the type of the config with a ConfigValue annotation to the Configurable's value. */
  @Provides
  @ConfigValue("otherFlag2")
  String provideConfigValue_otherFlag2(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.others.OtherThingA.otherFlag2");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }

  /** Binds a ConfigSupplier for config flag2 (Thing2.flag2) to the set multibinder. */
  private void bindConfigSupplier_flag2(Multibinder<ConfigSupplier> binder) {
    ConfigDescription description = ConfigDescription.builder()
        .packageName("com.bdl.config.things")
        .className("Thing2")
        .fieldName("flag2")
        .type("String")
        .build();
    binder.addBinding().toInstance(
        ConfigSupplier.simple(description, Thing2.flag2));
  }

  /** Binds the type of the config with a DummyBindingAnnotation annotation to the Configurable's value. */
  @Provides
  @DummyBindingAnnotation("flag2")
  String provideConfigValue_flag2(Configuration configuration) {
    try {
      return (String) configuration.get("com.bdl.config.things.Thing2.flag2");
    } catch (ConfigException ex) {
      throw ex.wrap();
    }
  }
}
